package action

import (
	"fmt"
	"io"
	"testing"

	"github.com/sethvargo/go-githubactions"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"

	"github.com/leonhfr/vocabulary-action/pkg/vocabulary"
)

func Test_handle(t *testing.T) {
	action := githubactions.New(
		githubactions.WithWriter(io.Discard),
	)
	parser := vocabulary.NewParser()

	workspace := "/workspace"
	languageDir := "german/vocabulary"
	targetDir := fmt.Sprintf("%s/%s", workspace, languageDir)

	sContent := `<!-- This file was generated by github.com/leonhfr/vocabulary-action and is susceptible to be modified by automations. -->

# s

Schuh

Spaziergang
"Example phrase."

Spiegel
Note line 1.
Note line 2.
`

	sExpected := `<!-- This file was generated by github.com/leonhfr/vocabulary-action and is susceptible to be modified by automations. -->

# s

Schuh

Spaziergang
"Example phrase."

Speer

Spiegel
Note line 1.
Note line 2.

s端chtig "s端chtig machen "
`

	fExpected := `<!-- This file was generated by github.com/leonhfr/vocabulary-action and is susceptible to be modified by automations. -->

# f

Fernweh
`

	buckets := map[rune][]string{
		's': {"s端chtig \"s端chtig machen \"", "Speer"},
		'f': {"Fernweh"},
	}

	fh := new(MockFileHandler)
	fh.On("Read", targetDir, "s.md").Return(sContent, nil)
	fh.On("Read", targetDir, "f.md").Return("", nil)
	fh.On("Write", targetDir, "s.md", sExpected).Return(nil)
	fh.On("Write", targetDir, "f.md", fExpected).Return(nil)

	err := handle(action, workspace, languageDir, buckets, parser, fh)

	fh.AssertExpectations(t)
	assert.NoError(t, err)
}

func Test_newInput(t *testing.T) {
	l, v := "de", "Spaziergang"

	tests := []struct {
		name   string
		envMap map[string]string
		want   input
		err    string
	}{
		{
			name: "working",
			envMap: map[string]string{
				"INPUT_LANGUAGE":   l,
				"INPUT_VOCABULARY": v,
			},
			want: input{
				language:   l,
				vocabulary: v,
			},
			err: "",
		},
		{
			name: "missing language",
			envMap: map[string]string{
				"INPUT_VOCABULARY": v,
			},
			want: input{},
			err:  "language cannot be an empty string",
		},
		{
			name: "missing language",
			envMap: map[string]string{
				"INPUT_LANGUAGE": l,
			},
			want: input{},
			err:  "vocabulary cannot be an empty string",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			getenv := func(key string) string {
				return tt.envMap[key]
			}

			action := githubactions.New(
				githubactions.WithWriter(io.Discard),
				githubactions.WithGetenv(getenv),
			)

			got, err := newInput(action)

			assert.Equal(t, tt.want, got)
			if tt.err == "" {
				assert.NoError(t, err)
			} else {
				assert.EqualError(t, err, tt.err)
			}
		})
	}
}

var _ vocabulary.FileHandler = &MockFileHandler{}

type MockFileHandler struct {
	mock.Mock
}

func (m *MockFileHandler) Read(dir, filename string) (string, error) {
	args := m.Called(dir, filename)
	return args.String(0), args.Error(1)
}

func (m *MockFileHandler) Write(dir, filename, contents string) error {
	args := m.Called(dir, filename, contents)
	return args.Error(0)
}
