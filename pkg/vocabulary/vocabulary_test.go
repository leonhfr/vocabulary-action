package vocabulary

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

var _ Runner = &Handler{}

func Test_bucketHandler(t *testing.T) {
	comment := "<!-- some comment -->"
	header := "# s"
	vocabulary := []string{"Spaziergang", "Spiegel"}

	contents := []string{
		comment,
		"",
		header,
		"",
		strings.Join(vocabulary, "\n"),
	}

	expected := "<!-- This file was generated by github.com/leonhfr/vocabulary-action and is susceptible to be modified by automations. -->\n\n# s\n\nSchuh #cognate\nSpaziergang\nSpiegel"

	dir, filename, r := "dir", "s.md", 's'

	fh := new(MockFileHandler)
	fh.On("Read", dir, filename).Return(strings.Join(contents, "\n"), nil)
	fh.On("Write", dir, filename, expected).Return(nil)

	err := bucketHandler(dir, r, []string{"Schuh #cognate"}, fh)

	fh.AssertExpectations(t)
	assert.NoError(t, err)
}

func Test_existingVocabulary(t *testing.T) {
	comment := "<!-- some comment -->"
	header := "# s"
	vocabulary := []string{"Spaziergang", "Spiegel"}

	contents := []string{
		comment,
		"",
		header,
		"",
		strings.Join(vocabulary, "\n"),
	}

	dir, filename := "dir", "s.md"
	fh := new(MockFileHandler)
	fh.On("Read", dir, filename).Return(strings.Join(contents, "\n"), nil)

	got, err := existingVocabulary(dir, filename, fh)

	fh.AssertExpectations(t)
	assert.Equal(t, got, vocabulary)
	assert.NoError(t, err)
}

func Test_parseVocabulary(t *testing.T) {
	comment := "<!-- some comment -->"
	header := "# s"
	vocabulary := []string{"Spaziergang", "Spiegel"}
	accepted, discarded := parseVocabulary([]string{
		comment,
		header,
		vocabulary[0],
		vocabulary[1],
	})

	assert.Equal(t, vocabulary, accepted)
	assert.Equal(t, []string{comment, header}, discarded)
}

func Test_formatSummary(t *testing.T) {
	vocabulary := []string{
		"süchtig \"süchtig machen \"",
		"Spaziergang",
		"Spiegel",
		"Schuh #cognate",
	}
	got := formatSummary(vocabulary)
	assert.Equal(t, "Schuh, Spaziergang, Spiegel, süchtig", got)
}

func Test_vocabularyBuckets(t *testing.T) {
	vocabulary := []string{
		"Spaziergang",
		"Spiegel",
		"Fernweh",
	}
	got := vocabularyBuckets(vocabulary)
	assert.Equal(t, map[rune][]string{
		's': {"Spaziergang", "Spiegel"},
		'f': {"Fernweh"},
	}, got)
}
